# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'socket'

hostname = Socket.gethostname
localmachineip = IPSocket.getaddress(Socket.gethostname)
puts %Q{ Host machine IP: '#{localmachineip} and hostname: '#{hostname}'}

# Check the required plugins and load if not present
required_plugins = %w(vagrant-hostmanager vagrant-sshfs landrush vagrant-registration vagrant-service-manager vagrant-vbguest)
plugins_to_install = required_plugins.select { |plugin| not Vagrant.has_plugin? plugin }
if not plugins_to_install.empty?
  puts "Installing plugins: #{plugins_to_install.join(' ')}"
  if system "vagrant plugin install #{plugins_to_install.join(' ')}"
    exec "vagrant #{ARGV.join(' ')}"
  else
    abort "Installation of one or more plugins has failed. Aborting."
  end
end

Vagrant.configure("2") do |config|

  # Perform the RedHat registration using the vagrant-registration plugin
  if ENV.has_key?('SUB_USERNAME') && ENV.has_key?('SUB_PASSWORD')
    config.registration.username = ENV['SUB_USERNAME']
    config.registration.password = ENV['SUB_PASSWORD']
    config.registration.unregister_on_halt = false
  else
    abort "EVs SUB_USERNAME and SUB_PASSWORD must be set to register with RedHat"
  end

  # Enable the landrush plugin for DNS mask
  config.landrush.enabled = true
  config.landrush.guest_redirect_dns = false

  # Enable the vagrant-hostmanager plugin for hosts file management
  config.hostmanager.enabled = true
  config.hostmanager.manage_host = true
  config.hostmanager.ignore_private_ip = false

  # OCP master server
  config.vm.define "master" do |master|
    master.vm.box = "rhel-server-7.4"
    master.vm.box_check_update = false
    master.vm.hostname = "#{hostname}-master.vagrant.test"
    master.hostmanager.aliases = "#{hostname}-master"
    # Note: this is set for the adapter on my machine - automate?
    #m.vm.network "public_network", bridge: "enp0s31f6"
    master.vm.network :private_network, ip: "192.168.100.101"
    master.vm.synced_folder "./shared", "/shared"
    master.vm.provider "virtualbox" do |mastervb|
      mastervb.name = "OCP-master"
      mastervb.memory = "1024"
      mastervb.cpus = 1
    end
  end
  # # OCP node 1(/2)
  # config.vm.define "node1" do |node1|
  #   node1.vm.box = "rhel-server-7.4"
  #   node1.vm.box_check_update = false
  #   node1.vm.hostname = "#{hostname}-node1.vagrant.test"
  #   node1.hostmanager.aliases = "#{hostname}-node1"
  #   # Note: this is set for the adapter on my machine - automate?
  #   #n.vm.network "public_network", bridge: "enp0s31f6"
  #   node1.vm.network "private_network", ip: "192.168.100.102"
  #   node1.vm.synced_folder "./shared", "/shared"
  #   node1.vm.provider "virtualbox" do |node1vb|
  #     node1vb.name = "OCP-node"
  #     node1vb.memory = "1024"
  #     node1vb.cpus = 1
  #   end
  # end
  # # OCP node 2(/2)
  # config.vm.define "node2" do |node2|
  #   node2.vm.box = "rhel-server-7.4"
  #   node2.vm.box_check_update = false
  #   node2.vm.hostname = "#{hostname}-node2.vagrant.test"
  #   node2.hostmanager.aliases = "#{hostname}-node2"
  #   # Note: this is set for the adapter on my machine - automate?
  #   # a.vm.network "public_network", bridge: "enp0s31f6"
  #   node2.vm.network "private_network", ip: "192.168.100.103"
  #   node2.vm.synced_folder "./shared", "/shared"
  #   node2.vm.provider "virtualbox" do |node2vb|
  #     node2vb.name = "OCP-node2"
  #     node2vb.memory = "1024"
  #     node2vb.cpus = 1
  #   end
  # end
  # # OCP infrastructure server
  # config.vm.define "admin" do |admin|
  #   admin.vm.box = "rhel-server-7.4"
  #   admin.vm.box_check_update = false
  #   admin.vm.hostname = "#{hostname}-admin.vagrant.test"
  #   admin.hostmanager.aliases = "#{hostname}-admin"
  #   # Note: this is set for the adapter on my machine - automate?
  #   # i.vm.network "public_network", bridge: "enp0s31f6"
  #   admin.vm.network "private_network", ip: "192.168.100.104"
  #   admin.vm.synced_folder "./shared", "/shared"
  #   admin.vm.provider "virtualbox" do |adminvb|
  #     adminvb.name = "OCP-admin"
  #     adminvb.memory = "1024"
  #     adminvb.cpus = 1
  #   end
  # end
end
